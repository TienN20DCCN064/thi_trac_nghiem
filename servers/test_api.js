import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';

const app = express();
const PORT = 5000;

app.use(cors());
app.use(bodyParser.json());

// üëá ƒë·∫∑t ·ªü tr√™n c√πng App.js
// B·∫£ng ng∆∞·ªùi d√πng (ch·ªâ th√¥ng tin c√° nh√¢n)
let users = [
  { id: 1, fullName: 'Peter Mackenzie', email: 'peter@example.com', userName: 'pmackenzie', password: 'admin123', roleId: 'Admin', phone: '123456789', image: '/images/images_api/img1.jpg' },
  { id: 2, fullName: 'Cind Zhang', email: 'cindy@example.com', userName: 'czhang', password: 'test123', roleId: 'Test', phone: '987654321', image: '' },
  { id: 3, fullName: 'Ted Smith', email: 'ted@example.com', userName: 'tsmith', password: 'test456', roleId: 'Test', phone: '456789123', image: '/images/images_api/cms.png' },
  { id: 4, fullName: 'Susan Fernbrook', email: 'susan@example.com', userName: 'sfern', password: 'test789', roleId: 'Test', phone: '321654987', image: '/images/images_api/img1.jpg' },
  { id: 5, fullName: 'Emily Kim', email: 'emily@example.com', userName: 'ekim', password: 'admin456', roleId: 'Admin', phone: '654321789', image: '/images/images_api/cms.png' },
  { id: 6, fullName: 'Peter Zhang', email: 'pzhang@example.com', userName: 'pzhang', password: 'user123', roleId: 'User', phone: '789456123', image: '/images/images_api/cms.png' },
  { id: 7, fullName: 'Cindy Smith', email: 'csmith@example.com', userName: 'csmith', password: 'user456', roleId: 'User', phone: '321654987', image: '/images/images_api/img1.jpg' },
  { id: 8, fullName: 'Ted Fernbrook', email: 'tedf@example.com', userName: 'tfern', password: 'test999', roleId: 'Test', phone: '654321789', image: '/images/images_api/cms.png' },
  { id: 9, fullName: 'Susan Kim', email: 'susan.k@example.com', userName: 'skim', password: 'user789', roleId: 'User', phone: '789456123', image: '/images/images_api/cms.png' },
  { id: 10, fullName: 'Emily Mackenzie', email: 'emac@example.com', userName: 'emac', password: 'admin789', roleId: 'Admin', phone: '321654987', image: '/images/images_api/cms.png' },
];

// B·∫£ng quy·ªÅn
let roles = [
  {
    id: "Admin",
    name: "ROLE ADMIN",
    mo_ta: "Quy·ªÅn cao nh·∫•t, c√≥ th·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† quy·ªÅn",
    permissions: {
      GET_LIST_SUBJECT_HISTORY: 1,
      GET_SUBJECT_HISTORY: 1,
      DELETE_GROUP: 1,
      DELETE_GROUP_PERMISSION: 1,
      UPDATE_LECTURE_CONTENT: 1,
      GET_LECTURE_CONTENT: 1,
      GET_LECTURE_CONTENT_BY_ID: 1,
      DELETE_LECTURE_CONTENT: 1,
      CREATE_LECTURE_CONTENT: 1,
      GET_LIST_LECTURE_CONTENT: 1,
      UPLOAD_VIDEO: 1,
      UPLOAD_FILE: 1,
      CREATE_ACCOUNT_BOOK: 1,
      DELETE_ACCOUNT_BOOK: 1,
      GET_ACCOUNT_BOOK: 1,
      GET_LIST_ACCOUNT_BOOK: 1,
      SYNC_BOOK_PERMISSION: 1,
      DELETE_BOOK_PERMISSION: 1,
      GET_BOOK_PERMISSION: 1,
      GET_LIST_BOOK_PERMISSION: 1,
      LIST_ACCOUNT_GROUP: 1,
      GET_ACCOUNT_GROUP: 1,
      DELETE_ACCOUNT_GROUP: 1,
      LIST_CATEGORY: 1,
      GET_CATEGORY: 1,
      UPDATE_CATEGORY: 1,
      CREATE_CATEGORY: 1,
      DELETE_CATEGORY: 1,
      GET_LECTURE_BY_SUBJECT: 1,
      GET_LIST_LECTURE: 1,
      UPDATE_LECTURE: 1,
      CREATE_LECTURE: 1,
      DELETE_LECTURE: 1,
      UPDATE_SORT_LECTURE: 1,
      DELETE_PUBLISHER: 1,
      GET_PUBLISHER: 1,
      CREATE_PUBLISHER: 1,
      GET_LIST_PUBLISHER: 1,
      DELETE_READER: 1,
      GET_READER: 1,
      CREATE_READER: 1,
      GET_LIST_READER: 1,
      UPDATE_READER: 1,
      CREATE_SETTING: 1,
      GET_SETTING: 1,
      GET_LIST_SETTING: 1,
      UPDATE_SETTING: 1,
      CREATE_PERMISSION: 1,
      LIST_PERMISSION: 1,
      UPDATE_GROUP_PERMISSION: 1,
      GET_GROUP_PERMISSION: 1,
      CREATE_GROUP_PERMISSION: 1,
      GET_LIST_GROUP_PERMISSION: 1,
      UPDATE_ADMIN_ACCOUNT: 1,
      CREATE_ADMIN_ACCOUNT: 1,
      DELETE_ACCOUNT: 1,
      GET_ACCOUNT: 1,
      GET_LIST_ACCOUNT: 1,
    },
  },
  {
    id: "Test",
    name: "ROLE TEST",
    mo_ta: "Quy·ªÅn ki·ªÉm tra, c√≥ th·ªÉ xem v√† ki·ªÉm tra n·ªôi dung",
    permissions: {
      GET_LIST_SUBJECT_HISTORY: 0,
      GET_SUBJECT_HISTORY: 0,
      DELETE_GROUP: 0,
      DELETE_GROUP_PERMISSION: 0,
      UPDATE_LECTURE_CONTENT: 0,
      GET_LECTURE_CONTENT: 1,
      GET_LECTURE_CONTENT_BY_ID: 1,
      DELETE_LECTURE_CONTENT: 1,
      CREATE_LECTURE_CONTENT: 1,
      GET_LIST_LECTURE_CONTENT: 1,
      UPLOAD_VIDEO: 1,
      UPLOAD_FILE: 1,
      CREATE_ACCOUNT_BOOK: 1,
      DELETE_ACCOUNT_BOOK: 1,
      GET_ACCOUNT_BOOK: 1,
      GET_LIST_ACCOUNT_BOOK: 1,
      SYNC_BOOK_PERMISSION: 1,
      DELETE_BOOK_PERMISSION: 1,
      GET_BOOK_PERMISSION: 1,
      GET_LIST_BOOK_PERMISSION: 1,
      LIST_ACCOUNT_GROUP: 1,
      GET_ACCOUNT_GROUP: 1,
      DELETE_ACCOUNT_GROUP: 1,
      LIST_CATEGORY: 1,
      GET_CATEGORY: 1,
      UPDATE_CATEGORY: 1,
      CREATE_CATEGORY: 1,
      DELETE_CATEGORY: 1,
      GET_LECTURE_BY_SUBJECT: 1,
      GET_LIST_LECTURE: 1,
      UPDATE_LECTURE: 1,
      CREATE_LECTURE: 1,
      DELETE_LECTURE: 1,
      UPDATE_SORT_LECTURE: 1,
      DELETE_PUBLISHER: 1,
      GET_PUBLISHER: 1,
      CREATE_PUBLISHER: 1,
      GET_LIST_PUBLISHER: 1,
      DELETE_READER: 1,
      GET_READER: 1,
      CREATE_READER: 1,
      GET_LIST_READER: 1,
      UPDATE_READER: 1,
      CREATE_SETTING: 1,
      GET_SETTING: 1,
      GET_LIST_SETTING: 1,
      UPDATE_SETTING: 1,
      CREATE_PERMISSION: 1,
      LIST_PERMISSION: 1,
      UPDATE_GROUP_PERMISSION: 1,
      GET_GROUP_PERMISSION: 1,
      CREATE_GROUP_PERMISSION: 1,
      GET_LIST_GROUP_PERMISSION: 1,
      UPDATE_ADMIN_ACCOUNT: 1,
      CREATE_ADMIN_ACCOUNT: 0,
      DELETE_ACCOUNT: 0,
      GET_ACCOUNT: 1,
      GET_LIST_ACCOUNT: 1,
    },
  },
  {
    id: "User",
    name: "ROLE USER",
    mo_ta: "Quy·ªÅn ng∆∞·ªùi d√πng, c√≥ th·ªÉ truy c·∫≠p n·ªôi dung c∆° b·∫£n",
    permissions: {
      GET_LIST_SUBJECT_HISTORY: 1,
      GET_SUBJECT_HISTORY: 0,
      DELETE_GROUP: 0,
      DELETE_GROUP_PERMISSION: 0,
      UPDATE_LECTURE_CONTENT: 0,
      GET_LECTURE_CONTENT: 1,
      GET_LECTURE_CONTENT_BY_ID: 1,
      DELETE_LECTURE_CONTENT: 1,
      CREATE_LECTURE_CONTENT: 1,
      GET_LIST_LECTURE_CONTENT: 1,
      UPLOAD_VIDEO: 1,
      UPLOAD_FILE: 1,
      CREATE_ACCOUNT_BOOK: 1,
      DELETE_ACCOUNT_BOOK: 1,
      GET_ACCOUNT_BOOK: 1,
      GET_LIST_ACCOUNT_BOOK: 1,
      SYNC_BOOK_PERMISSION: 1,
      DELETE_BOOK_PERMISSION: 1,
      GET_BOOK_PERMISSION: 1,
      GET_LIST_BOOK_PERMISSION: 1,
      LIST_ACCOUNT_GROUP: 1,
      GET_ACCOUNT_GROUP: 1,
      DELETE_ACCOUNT_GROUP: 1,
      LIST_CATEGORY: 1,
      GET_CATEGORY: 1,
      UPDATE_CATEGORY: 1,
      CREATE_CATEGORY: 1,
      DELETE_CATEGORY: 1,
      GET_LECTURE_BY_SUBJECT: 1,
      GET_LIST_LECTURE: 1,
      UPDATE_LECTURE: 1,
      CREATE_LECTURE: 1,
      DELETE_LECTURE: 1,
      UPDATE_SORT_LECTURE: 1,
      DELETE_PUBLISHER: 1,
      GET_PUBLISHER: 1,
      CREATE_PUBLISHER: 1,
      GET_LIST_PUBLISHER: 1,
      DELETE_READER: 1,
      GET_READER: 1,
      CREATE_READER: 1,
      GET_LIST_READER: 1,
      UPDATE_READER: 1,
      CREATE_SETTING: 1,
      GET_SETTING: 1,
      GET_LIST_SETTING: 1,
      UPDATE_SETTING: 1,
      CREATE_PERMISSION: 1,
      LIST_PERMISSION: 1,
      UPDATE_GROUP_PERMISSION: 1,
      GET_GROUP_PERMISSION: 1,
      CREATE_GROUP_PERMISSION: 1,
      GET_LIST_GROUP_PERMISSION: 1,
      UPDATE_ADMIN_ACCOUNT: 1,
      CREATE_ADMIN_ACCOUNT: 0,
      DELETE_ACCOUNT: 0,
      GET_ACCOUNT: 1,
      GET_LIST_ACCOUNT: 1,
    },
  },
];
let questionGroups = [
  {
    id: 1,
    name: "Nh√≥m ki·∫øn th·ª©c l·∫≠p tr√¨nh",
    data: [
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh ph√≠a frontend",
        answers: [
          { text: "HTML", isCorrect: true },
          { text: "CSS", isCorrect: true },
          { text: "Python", isCorrect: false },
          { text: "JavaScript", isCorrect: true }
        ]
      },
      {
        type: "Single",
        item: "Ng√¥n ng·ªØ n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫≠p tr√¨nh Android?",
        answers: [
          { text: "Java", isCorrect: true },
          { text: "Python", isCorrect: false },
          { text: "C#", isCorrect: false },
          { text: "Ruby", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c h·ªá ƒëi·ªÅu h√†nh m√£ ngu·ªìn m·ªü",
        answers: [
          { text: "Linux", isCorrect: true },
          { text: "Windows", isCorrect: false },
          { text: "Ubuntu", isCorrect: true },
          { text: "macOS", isCorrect: false }
        ]
      }
    ]
  },
  {
    id: 2,
    name: "Nh√≥m ki·∫øn th·ª©c c∆° s·ªü d·ªØ li·ªáu",
    data: [
      {
        type: "Single",
        item: "Database n√†o l√† quan h·ªá?",
        answers: [
          { text: "MySQL", isCorrect: true },
          { text: "MongoDB", isCorrect: false },
          { text: "Redis", isCorrect: false },
          { text: "Cassandra", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c lo·∫°i database NoSQL",
        answers: [
          { text: "MongoDB", isCorrect: true },
          { text: "Redis", isCorrect: true },
          { text: "MySQL", isCorrect: false },
          { text: "PostgreSQL", isCorrect: false }
        ]
      }
    ]
  },
  // 8 nh√≥m m·ªõi
  {
    id: 3,
    name: "Nh√≥m ki·∫øn th·ª©c JavaScript",
    data: [
      {
        type: "Single",
        item: "Ph∆∞∆°ng th·ª©c n√†o d√πng ƒë·ªÉ th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng?",
        answers: [
          { text: "push()", isCorrect: true },
          { text: "pop()", isCorrect: false },
          { text: "shift()", isCorrect: false },
          { text: "unshift()", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c ki·ªÉu d·ªØ li·ªáu nguy√™n th·ªßy trong JS",
        answers: [
          { text: "String", isCorrect: true },
          { text: "Number", isCorrect: true },
          { text: "Object", isCorrect: false },
          { text: "Boolean", isCorrect: true }
        ]
      }
    ]
  },
  {
    id: 4,
    name: "Nh√≥m ki·∫øn th·ª©c HTML & CSS",
    data: [
      {
        type: "Single",
        item: "Th·∫ª HTML n√†o d√πng ƒë·ªÉ t·∫°o ti√™u ƒë·ªÅ l·ªõn nh·∫•t?",
        answers: [
          { text: "<h1>", isCorrect: true },
          { text: "<h6>", isCorrect: false },
          { text: "<header>", isCorrect: false },
          { text: "<title>", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c thu·ªôc t√≠nh CSS v·ªÅ m√†u s·∫Øc",
        answers: [
          { text: "color", isCorrect: true },
          { text: "background-color", isCorrect: true },
          { text: "font-size", isCorrect: false },
          { text: "border", isCorrect: false }
        ]
      }
    ]
  },
  {
    id: 5,
    name: "Nh√≥m ki·∫øn th·ª©c m·∫°ng m√°y t√≠nh",
    data: [
      {
        type: "Single",
        item: "Giao th·ª©c n√†o d√πng ƒë·ªÉ truy·ªÅn d·ªØ li·ªáu an to√†n tr√™n Internet?",
        answers: [
          { text: "HTTPS", isCorrect: true },
          { text: "HTTP", isCorrect: false },
          { text: "FTP", isCorrect: false },
          { text: "TCP", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c thi·∫øt b·ªã m·∫°ng ph·ªï bi·∫øn",
        answers: [
          { text: "Router", isCorrect: true },
          { text: "Switch", isCorrect: true },
          { text: "Printer", isCorrect: false },
          { text: "Hub", isCorrect: true }
        ]
      }
    ]
  },
  {
    id: 6,
    name: "Nh√≥m ki·∫øn th·ª©c Python",
    data: [
      {
        type: "Single",
        item: "H√†m n√†o d√πng ƒë·ªÉ in ra m√†n h√¨nh trong Python?",
        answers: [
          { text: "print()", isCorrect: true },
          { text: "echo()", isCorrect: false },
          { text: "console.log()", isCorrect: false },
          { text: "printf()", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c ki·ªÉu d·ªØ li·ªáu trong Python",
        answers: [
          { text: "int", isCorrect: true },
          { text: "str", isCorrect: true },
          { text: "float", isCorrect: true },
          { text: "char", isCorrect: false }
        ]
      }
    ]
  },
  {
    id: 7,
    name: "Nh√≥m ki·∫øn th·ª©c Linux",
    data: [
      {
        type: "Single",
        item: "L·ªánh n√†o d√πng ƒë·ªÉ li·ªát k√™ c√°c file trong th∆∞ m·ª•c hi·ªán t·∫°i?",
        answers: [
          { text: "ls", isCorrect: true },
          { text: "cd", isCorrect: false },
          { text: "mkdir", isCorrect: false },
          { text: "rm", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c l·ªánh thao t√°c file tr√™n Linux",
        answers: [
          { text: "cp", isCorrect: true },
          { text: "mv", isCorrect: true },
          { text: "rm", isCorrect: true },
          { text: "echo", isCorrect: false }
        ]
      }
    ]
  },
  {
    id: 8,
    name: "Nh√≥m ki·∫øn th·ª©c Git",
    data: [
      {
        type: "Single",
        item: "L·ªánh n√†o d√πng ƒë·ªÉ kh·ªüi t·∫°o repository m·ªõi?",
        answers: [
          { text: "git init", isCorrect: true },
          { text: "git clone", isCorrect: false },
          { text: "git commit", isCorrect: false },
          { text: "git push", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c l·ªánh d√πng ƒë·ªÉ qu·∫£n l√Ω branch",
        answers: [
          { text: "git branch", isCorrect: true },
          { text: "git checkout", isCorrect: true },
          { text: "git merge", isCorrect: true },
          { text: "git pull", isCorrect: false }
        ]
      }
    ]
  },
  {
    id: 9,
    name: "Nh√≥m ki·∫øn th·ª©c React",
    data: [
      {
        type: "Single",
        item: "Hook n√†o d√πng ƒë·ªÉ qu·∫£n l√Ω state trong function component?",
        answers: [
          { text: "useState", isCorrect: true },
          { text: "useEffect", isCorrect: false },
          { text: "useReducer", isCorrect: false },
          { text: "useContext", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c th√†nh ph·∫ßn c·ªßa React",
        answers: [
          { text: "Component", isCorrect: true },
          { text: "Props", isCorrect: true },
          { text: "State", isCorrect: true },
          { text: "Class", isCorrect: true }
        ]
      }
    ]
  },
  {
    id: 10,
    name: "Nh√≥m ki·∫øn th·ª©c thu·∫≠t to√°n",
    data: [
      {
        type: "Single",
        item: "Thu·∫≠t to√°n s·∫Øp x·∫øp n√†o nhanh nh·∫•t trung b√¨nh?",
        answers: [
          { text: "Quick Sort", isCorrect: true },
          { text: "Bubble Sort", isCorrect: false },
          { text: "Selection Sort", isCorrect: false },
          { text: "Insertion Sort", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c thu·∫≠t to√°n t√¨m ki·∫øm",
        answers: [
          { text: "Binary Search", isCorrect: true },
          { text: "Linear Search", isCorrect: true },
          { text: "Depth First Search", isCorrect: true },
          { text: "Breadth First Search", isCorrect: true }
        ]
      }
    ]
  },
  {
    id: 11,
    name: "Nh√≥m ki·∫øn th·ª©c AI & Machine Learning",
    data: [
      {
        type: "Single",
        item: "Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?   Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?Thu·∫≠t to√°n n√†o th∆∞·ªùng d√πng ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu?",
        answers: [
          { text: "Decision Tree", isCorrect: true },
          { text: "K-Means", isCorrect: false },
          { text: "PCA", isCorrect: false },
          { text: "Gradient Descent", isCorrect: false }
        ]
      },
      {
        type: "Multiple",
        item: "Ch·ªçn c√°c lo·∫°i h·ªçc m√°y (Machine Learning)",
        answers: [
          { text: "Supervised Learning", isCorrect: true },
          { text: "Unsupervised Learning", isCorrect: true },
          { text: "Reinforcement Learning", isCorrect: true },
          { text: "Deep Learning", isCorrect: true }
        ]
      }
    ]
  }

];




// H√†m s·∫Øp x·∫øp ng∆∞·ªùi d√πng theo fullName
function sortUsers(usersArray) {
  // Clone m·∫£ng ƒë·ªÉ kh√¥ng mutate d·ªØ li·ªáu g·ªëc
  const sortedUsers = [...usersArray].sort((a, b) => {
    const nameA = (a.fullName || "").trim().toLowerCase();
    const nameB = (b.fullName || "").trim().toLowerCase();
    return nameA.localeCompare(nameB);
  });

  // Th√™m index (STT)
  const usersWithIndex = sortedUsers.map((user, index) => ({
    ...user,
    index: index + 1
  }));

  return usersWithIndex;
}

// ================= USERS ===================
// L·∫•y users theo ph√¢n trang
// L·∫•y users theo ph√¢n trang v√† h·ªó tr·ª£ t√¨m ki·∫øm
app.get('/api/users/paging', (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const pageSize = parseInt(req.query.pageSize) || 10;
  const nameSearch = (req.query.name || '').toLowerCase();
  const phoneSearch = (req.query.phone || '').toLowerCase();

  // 1Ô∏è‚É£ S·∫Øp x·∫øp tr∆∞·ªõc
  let sortedUsers = sortUsers(users);

  // 2Ô∏è‚É£ L·ªçc theo name v√† phone n·∫øu c√≥
  if (nameSearch || phoneSearch) {
    sortedUsers = sortedUsers.filter(u => {
      const fullName = (u.fullName || '').toLowerCase();
      const phone = (u.phone || '').toLowerCase();
      const matchName = !nameSearch || fullName.includes(nameSearch);
      const matchPhone = !phoneSearch || phone.includes(phoneSearch);
      return matchName && matchPhone;
    });
  }

  // 3Ô∏è‚É£ T√≠nh ch·ªâ s·ªë ph√¢n trang
  const startIndex = (page - 1) * pageSize;
  const endIndex = startIndex + pageSize;

  // 4Ô∏è‚É£ L·∫•y danh s√°ch ph√¢n trang
  const pagedUsers = sortedUsers.slice(startIndex, endIndex);

  res.json({
    data: pagedUsers,
    page: page,
    pageSize: pageSize,
    total: sortedUsers.length,
    totalPages: Math.ceil(sortedUsers.length / pageSize)
  });
});



// L·∫•y to√†n b·ªô users nh∆∞ng gi·∫£ l·∫≠p tr·∫£ v·ªÅ r·ªóng
app.get('/api/users', (req, res) => {
  res.json({
    data: [],   // üëà tr·∫£ v·ªÅ r·ªóng
    offset: 0,
    limit: 0,
    total: 0
  });
});

// ================= USERS ===================

// L·∫•y to√†n b·ªô users
// app.get('/api/users', (req, res) => {
//   res.json({
//     data: users,
//     offset: 0,
//     limit: users.length,
//     total: users.length
//   });
// });

// L·∫•y 1 user theo id
app.get('/api/users/:id', (req, res) => {
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).json({ error: 'User not found' });
  res.json(user);
});

app.post('/api/users', (req, res) => {
  const { fullName, email, userName, password, roleId, phone, image } = req.body;

  // B·ªè email ra kh·ªèi validate
  if (!fullName || !userName || !password || !roleId || !phone || !image) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const newUser = {
    id: users.length ? Math.max(...users.map(u => u.id)) + 1 : 1,
    fullName,
    email: email || "",  // n·∫øu kh√¥ng c√≥ email, ƒë·ªÉ r·ªóng
    userName,
    password,
    roleId,
    phone,
    image: image || ""
  };
  users.push(newUser);
  res.status(201).json(newUser);
});


app.put('/api/users/:id', (req, res) => {
  const { fullName, email, userName, password, roleId, phone, image } = req.body;
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).json({ error: 'User not found' });

  user.fullName = fullName ?? user.fullName;
  // Cho ph√©p email v√† image r·ªóng, n·∫øu kh√¥ng g·ª≠i th√¨ gi·ªØ nguy√™n
  if (email !== undefined) user.email = email;
  user.userName = userName ?? user.userName;
  user.password = password ?? user.password;
  user.roleId = roleId ?? user.roleId;
  user.phone = phone ?? user.phone;
  user.image = image ?? user.image;


  res.json(user);
});


// Xo√° user
app.delete('/api/users/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = users.findIndex(u => u.id === id);
  if (index === -1) return res.status(404).json({ error: 'User not found' });

  const deletedUser = users.splice(index, 1);
  res.json(deletedUser[0]);
});



// ================= ROLES ===================

// ================= ROLES ===================

// L·∫•y t·∫•t c·∫£ roles
app.get('/api/roles', (req, res) => {
  res.json({
    data: roles,
    offset: 0,
    limit: roles.length,
    total: roles.length
  });
});

app.get('/api/roles/page', (req, res) => {
  const { page = 1, pageSize = 10, nameRole } = req.query;

  // 1Ô∏è‚É£ L·ªçc danh s√°ch roles theo nameRole (n·∫øu c√≥)
  let filteredRoles = roles;
  if (nameRole) {
    filteredRoles = filteredRoles.filter(r => r.name.toLowerCase().includes(nameRole.toLowerCase()));
  }

  // 2Ô∏è‚É£ S·∫Øp x·∫øp danh s√°ch roles
  filteredRoles.sort((a, b) => a.name.localeCompare(b.name));

  // 3Ô∏è‚É£ T√≠nh ch·ªâ s·ªë ph√¢n trang
  const startIndex = (page - 1) * pageSize;
  const endIndex = startIndex + pageSize;

  // 4Ô∏è‚É£ L·∫•y danh s√°ch ph√¢n trang
  const pagedRoles = filteredRoles.slice(startIndex, endIndex);

  res.json({
    data: pagedRoles,
    page: page,
    pageSize: pageSize,
    total: filteredRoles.length,
    totalPages: Math.ceil(filteredRoles.length / pageSize)
  });
});

// L·∫•y 1 role theo id
app.get('/api/roles/:id', (req, res) => {
  const role = roles.find(r => r.id === req.params.id);
  if (!role) return res.status(404).json({ error: 'Role not found' });
  res.json(role);
});

// T·∫°o m·ªõi role v·ªõi permissions m·∫∑c ƒë·ªãnh 0
app.post('/api/roles', (req, res) => {
  const { id, name, mo_ta } = req.body;
  if (roles.find(r => r.id === id)) {
    return res.status(400).json({ error: 'Role already exists' });
  }

  // T·∫°o permissions m·∫∑c ƒë·ªãnh = 0 d·ª±a tr√™n c√°c key c·ªßa role "Admin"
  const defaultPermissions = {};
  Object.keys(roles[0].permissions).forEach(key => defaultPermissions[key] = 0);

  const newRole = { id, name, mo_ta, permissions: defaultPermissions };
  roles.push(newRole);
  res.status(201).json(newRole);
});

// C·∫≠p nh·∫≠t role (c√≥ th·ªÉ s·ª≠a name, mo_ta, permissions)
app.put('/api/roles/:id', (req, res) => {
  const role = roles.find(r => r.id === req.params.id);
  if (!role) return res.status(404).json({ error: 'Role not found' });

  const { name, mo_ta, permissions } = req.body;
  role.name = name ?? role.name;
  role.mo_ta = mo_ta ?? role.mo_ta;

  // N·∫øu g·ª≠i permissions th√¨ c·∫≠p nh·∫≠t
  if (permissions) {
    role.permissions = { ...role.permissions, ...permissions };
  }

  res.json(role);
});

// X√≥a role
app.delete('/api/roles/:id', (req, res) => {
  const index = roles.findIndex(r => r.id === req.params.id);
  if (index === -1) return res.status(404).json({ error: 'Role not found' });

  const deletedRole = roles.splice(index, 1);
  res.json(deletedRole[0]);
});

// ================= QUESTION GROUPS ===================

// // L·∫•y to√†n b·ªô nh√≥m c√¢u h·ªèi
// app.get('/api/questionGroups', (req, res) => {
//   res.json({
//     data: questionGroups,
//     offset: 0,  
//     limit: questionGroups.length,
//     total: questionGroups.length
//   });
// });
// L·∫•y nh√≥m c√¢u h·ªèi theo ph√¢n trang v√† h·ªó tr·ª£ t√¨m ki·∫øm
app.get('/api/questionGroups/paging', (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const pageSize = parseInt(req.query.pageSize) || 10;
  const groupNameSearch = (req.query.groupName || '').toLowerCase();

  // 1Ô∏è‚É£ S·∫Øp x·∫øp theo name
  let sortedGroups = [...questionGroups].sort((a, b) => {
    const nameA = (a.name || '').trim().toLowerCase();
    const nameB = (b.name || '').trim().toLowerCase();
    return nameA.localeCompare(nameB);
  });

  // 2Ô∏è‚É£ L·ªçc theo groupName n·∫øu c√≥
  if (groupNameSearch) {
    sortedGroups = sortedGroups.filter(g => (g.name || '').toLowerCase().includes(groupNameSearch));
  }

  // 3Ô∏è‚É£ T√≠nh ch·ªâ s·ªë ph√¢n trang
  const startIndex = (page - 1) * pageSize;
  const endIndex = startIndex + pageSize;

  // 4Ô∏è‚É£ L·∫•y danh s√°ch ph√¢n trang
  const pagedGroups = sortedGroups.slice(startIndex, endIndex);

  // 5Ô∏è‚É£ Tr·∫£ v·ªÅ
  res.json({
    data: pagedGroups,
    page: page,
    pageSize: pageSize,
    total: sortedGroups.length,
    totalPages: Math.ceil(sortedGroups.length / pageSize)
  });
});

// L·∫•y 1 nh√≥m c√¢u h·ªèi theo id
app.get('/api/questionGroups/:id', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.id));
  if (!group) return res.status(404).json({ error: 'Question group not found' });
  res.json(group);
});

// T·∫°o m·ªõi nh√≥m c√¢u h·ªèi
app.post('/api/questionGroups', (req, res) => {
  const { name, data } = req.body;
  if (!name || !data || !Array.isArray(data)) {
    return res.status(400).json({ error: 'Missing required fields or invalid data' });
  }

  const newGroup = {
    id: questionGroups.length ? Math.max(...questionGroups.map(q => q.id)) + 1 : 1,
    name,
    data
  };

  questionGroups.push(newGroup);
  res.status(201).json(newGroup);
});

// C·∫≠p nh·∫≠t nh√≥m c√¢u h·ªèi
app.put('/api/questionGroups/:id', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.id));
  if (!group) return res.status(404).json({ error: 'Question group not found' });

  const { name, data } = req.body;
  if (name !== undefined) group.name = name;
  if (data !== undefined && Array.isArray(data)) group.data = data;

  res.json(group);
});

// X√≥a nh√≥m c√¢u h·ªèi
app.delete('/api/questionGroups/:id', (req, res) => {
  const index = questionGroups.findIndex(q => q.id === parseInt(req.params.id));
  if (index === -1) return res.status(404).json({ error: 'Question group not found' });

  const deletedGroup = questionGroups.splice(index, 1);
  res.json(deletedGroup[0]);
});

// ================= QUESTION ITEMS ===================

// Th√™m c√¢u h·ªèi v√†o nh√≥m
app.post('/api/questionGroups/:groupId/items', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.groupId));
  if (!group) return res.status(404).json({ error: 'Question group not found' });

  const { type, item, answers } = req.body;
  if (!type || !item || !Array.isArray(answers)) {
    return res.status(400).json({ error: 'Missing required fields or invalid answers' });
  }

  const newQuestion = { type, item, answers };
  group.data.push(newQuestion);
  res.status(201).json(newQuestion);
});

// C·∫≠p nh·∫≠t c√¢u h·ªèi trong nh√≥m
app.put('/api/questionGroups/:groupId/items/:index', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.groupId));
  if (!group) return res.status(404).json({ error: 'Question group not found' });

  const index = parseInt(req.params.index);
  if (index < 0 || index >= group.data.length) return res.status(404).json({ error: 'Question not found' });

  const { type, item, answers } = req.body;
  if (type) group.data[index].type = type;
  if (item) group.data[index].item = item;
  if (answers && Array.isArray(answers)) group.data[index].answers = answers;

  res.json(group.data[index]);
});

// X√≥a c√¢u h·ªèi trong nh√≥m
app.delete('/api/questionGroups/:groupId/items/:index', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.groupId));
  if (!group) return res.status(404).json({ error: 'Question group not found' });

  const index = parseInt(req.params.index);
  if (index < 0 || index >= group.data.length) return res.status(404).json({ error: 'Question not found' });

  const deleted = group.data.splice(index, 1);
  res.json(deleted[0]);
});

// L·∫•y 1 c√¢u h·ªèi trong nh√≥m
app.get('/api/questionGroups/:groupId/items/:index', (req, res) => {
  const group = questionGroups.find(q => q.id === parseInt(req.params.groupId));
  if (!group) return res.status(404).json({ error: 'Question group not found' });

  const index = parseInt(req.params.index);
  if (index < 0 || index >= group.data.length) return res.status(404).json({ error: 'Question not found' });

  res.json(group.data[index]);
});



// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
